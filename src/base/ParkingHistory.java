package base;

import com.sun.source.tree.BinaryTree;
import implementasi.NodeExit;
import implementasi.Tree;
import implementasi.TreeExit;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class ParkingHistory extends javax.swing.JFrame {

    private TreeExit treeExit;
    private Tree tree;

    DefaultTableModel mode;

    public ParkingHistory(Tree tree, TreeExit treeExit) {
        initComponents();
        this.treeExit = treeExit;
        this.tree = tree;

        getContentPane().setBackground(new Color(30, 30, 30));
        tabelList.fixTable(jScrollPane1);
        tabelList.setColumnAlignment(0, JLabel.CENTER);
        tabelList.setCellAlignment(0, JLabel.CENTER);
        tabelList.setColumnAlignment(1, JLabel.CENTER);
        tabelList.setCellAlignment(1, JLabel.CENTER);
        tabelList.setColumnAlignment(2, JLabel.CENTER);
        tabelList.setCellAlignment(2, JLabel.CENTER);
        tabelList.setColumnAlignment(3, JLabel.CENTER);
        tabelList.setCellAlignment(3, JLabel.CENTER);
        tabelList.setColumnAlignment(4, JLabel.CENTER);
        tabelList.setCellAlignment(4, JLabel.CENTER);
        tabelList.setColumnWidth(0, 100);
        tabelList.setColumnWidth(1, 100);
        tabelList.setColumnWidth(2, 100);
        tabelList.setColumnWidth(3, 100);
        tabelList.setColumnWidth(4, 100);
        mode = (DefaultTableModel) tabelList.getModel();
        displayDataInTable();
    }
        private void deleteFromDatabase(int ticketNumber) {
        String query = "DELETE FROM parkingApp.exit WHERE ticketNumber = ?";
        try {
            Connection conn = Koneksi.getkoneksi();
            PreparedStatement pst = conn.prepareStatement(query);
            pst.setInt(1, ticketNumber);
            pst.executeUpdate();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Failed to delete from database. ERROR: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabelList = new tabledark.TableDark();
        enterTicket = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        dashboard = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabelList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "License Number", "Plate", "Type", "Entry Time", "Exit Time", "Duration", "Tariff"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelList);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 180, 730, 500));

        enterTicket.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        enterTicket.setText("ENTER TICKET NUMBER");
        enterTicket.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));
        enterTicket.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                enterTicketFocusGained(evt);
            }
        });
        enterTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterTicketActionPerformed(evt);
            }
        });
        getContentPane().add(enterTicket, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 320, 160, 30));

        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        getContentPane().add(search, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 370, 90, -1));

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        getContentPane().add(delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 410, 90, -1));

        dashboard.setText("Dashboard");
        dashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dashboardActionPerformed(evt);
            }
        });
        getContentPane().add(dashboard, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 450, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/parking history (1).png"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 770));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
         int selectedRow = tabelList.getSelectedRow();
        if (selectedRow != -1) {
            int ticketNumber = (int) mode.getValueAt(selectedRow, 0);
            deleteFromDatabase(ticketNumber);
            boolean delete = treeExit.delete(ticketNumber);
            if (delete) {
                mode.removeRow(selectedRow);
            } else {
                JOptionPane.showMessageDialog(this, "failed to delete", "Deletion Failed", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "please select a row to delete", "no row selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void enterTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterTicketActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enterTicketActionPerformed

    private void dashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dashboardActionPerformed
        dashboard back = new dashboard(tree, treeExit);
        back.setVisible(true);
        dispose();
    }//GEN-LAST:event_dashboardActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        String enteredTicket = enterTicket.getText();
        if (!enteredTicket.equals("ENTER TICKET NUMBER")) {
            try {
                int ticketNumber = Integer.parseInt(enteredTicket);
                NodeExit foundNode = treeExit.find(ticketNumber);
                
                if (foundNode != null) {
                    displayDataInTable();
                    int rowIndex = findRowIndexByTicketNumber(foundNode.ticketNumber);
                    if (rowIndex != -1) {
                        tabelList.setRowSelectionInterval(rowIndex, rowIndex);
                    } else {
                        JOptionPane.showMessageDialog(this, "Ticket not found", "Not Found", JOptionPane.WARNING_MESSAGE);
                    }
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid ticket number", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        enterTicket.setText("ENTER TICKET NUMBER");
    }//GEN-LAST:event_searchActionPerformed

    private int findRowIndexByTicketNumber(int ticketNumber) {
        for (int i = 0; i < tabelList.getRowCount(); i++) {
            int tableTicketNumber = (int) tabelList.getValueAt(i, 0);
            if (tableTicketNumber == ticketNumber) {
                return i;
            }
        }
        return -1; 
    }

    private void enterTicketFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enterTicketFocusGained
        String enter = enterTicket.getText();
        if (enter.equals("ENTER TICKET NUMBER")) {
            enterTicket.setText("");
        }
    }//GEN-LAST:event_enterTicketFocusGained
    private void displayDataInTable() {
        mode.setRowCount(0); 
        NodeExit root = treeExit.getRoot();
        if (root != null) {
            displayInOrder(treeExit.getRoot(), mode); 
        }
        tabelList.setModel(mode);
    }

    public void displayInOrder(NodeExit nodeExit, DefaultTableModel mode) {
        if (nodeExit != null) {
            
            String licensePlateNumber = nodeExit.plat;
            String type = nodeExit.type;
            String entryTime = nodeExit.entryTime; 

            String exitTime = nodeExit.exitTime;

            long duration = nodeExit.duration;
            long tarif = nodeExit.tarif;
            Object[] row = {nodeExit.ticketNumber, licensePlateNumber, type, entryTime, exitTime, duration, tarif};
            mode.addRow(row);

            displayInOrder(nodeExit.leftChild, mode);
            displayInOrder(nodeExit.rightChild, mode);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton dashboard;
    private javax.swing.JButton delete;
    private javax.swing.JTextField enterTicket;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton search;
    private tabledark.TableDark tabelList;
    // End of variables declaration//GEN-END:variables
}
