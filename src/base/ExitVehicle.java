/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package base;

import implementasi.Node;
import implementasi.NodeExit;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;
import implementasi.Tree;
import implementasi.TreeExit;
import java.time.Duration;
import java.time.LocalDateTime;

import javax.swing.JOptionPane;

/**
 *
 * @author asuss
 */
public class ExitVehicle extends javax.swing.JFrame {

    private Tree binarytree;
    private TreeExit binarytreeExit;
    DefaultTableModel mode;

    public ExitVehicle() {
        initComponents();
    }

    public ExitVehicle(Tree tree, TreeExit treeExit) {
        initComponents();
        this.binarytree = tree;
        this.binarytreeExit = treeExit;
        ticketNumberOut.setText("TICKET NUMBER");
        plateOut.setText("LISCENSE PLATE NUMBER");
        typeOut.setText("TYPE");
        ticketNumberOut.setEditable(false);
        plateOut.setEditable(false);
        typeOut.setEditable(false);

        getContentPane().setBackground(new Color(30, 30, 30));
        tabelList.fixTable(jScrollPane1);
        tabelList.setColumnAlignment(0, JLabel.CENTER);
        tabelList.setCellAlignment(0, JLabel.CENTER);
        tabelList.setColumnAlignment(1, JLabel.CENTER);
        tabelList.setCellAlignment(1, JLabel.CENTER);
        tabelList.setColumnAlignment(2, JLabel.CENTER);
        tabelList.setCellAlignment(2, JLabel.CENTER);
        tabelList.setColumnAlignment(3, JLabel.CENTER);
        tabelList.setCellAlignment(3, JLabel.CENTER);
        tabelList.setColumnAlignment(4, JLabel.CENTER);
        tabelList.setCellAlignment(4, JLabel.CENTER);
        tabelList.setColumnWidth(0, 100);
        tabelList.setColumnWidth(1, 100);
        tabelList.setColumnWidth(2, 100);
        tabelList.setColumnWidth(3, 100);
        tabelList.setColumnWidth(4, 100);
        mode = (DefaultTableModel) tabelList.getModel();
        displayDataInTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabelList = new tabledark.TableDark();
        enterTicketNumber = new javax.swing.JTextField();
        find = new javax.swing.JButton();
        OUT = new javax.swing.JButton();
        ticketNumberOut = new javax.swing.JTextField();
        typeOut = new javax.swing.JTextField();
        plateOut = new javax.swing.JTextField();
        dashboard = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabelList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ticket", "Plate", "Type", "Entry Time", "Exit Time", "Duration /min", "Tariff"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelList);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 140, 570, 500));

        enterTicketNumber.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        enterTicketNumber.setText("ENTER TICKET NUMBER");
        enterTicketNumber.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));
        enterTicketNumber.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                enterTicketNumberFocusGained(evt);
            }
        });
        enterTicketNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterTicketNumberActionPerformed(evt);
            }
        });
        getContentPane().add(enterTicketNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, 170, 40));

        find.setBackground(new java.awt.Color(51, 153, 0));
        find.setText("FIND");
        find.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                findMouseClicked(evt);
            }
        });
        find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findActionPerformed(evt);
            }
        });
        getContentPane().add(find, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 210, 80, 30));

        OUT.setBackground(new java.awt.Color(205, 0, 51));
        OUT.setText("OUT");
        OUT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OUTActionPerformed(evt);
            }
        });
        getContentPane().add(OUT, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 360, 80, 30));

        ticketNumberOut.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ticketNumberOut.setText("TICKET NUMBER");
        ticketNumberOut.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));
        ticketNumberOut.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ticketNumberOutFocusGained(evt);
            }
        });
        getContentPane().add(ticketNumberOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 300, 170, 40));

        typeOut.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        typeOut.setText("TYPE");
        typeOut.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));
        getContentPane().add(typeOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 420, 170, 30));

        plateOut.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        plateOut.setText("LISCENSE PLATE NUMBER");
        plateOut.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));
        getContentPane().add(plateOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 360, 170, 40));

        dashboard.setText("Dashboard");
        dashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dashboardActionPerformed(evt);
            }
        });
        getContentPane().add(dashboard, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 702, -1, 30));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/exit vehicle (1).png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 770));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void enterTicketNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterTicketNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enterTicketNumberActionPerformed

    private void enterTicketNumberFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enterTicketNumberFocusGained
        String enter = enterTicketNumber.getText();
        if (enter.equals("ENTER TICKET NUMBER")) {
            enterTicketNumber.setText("");
        }
    }//GEN-LAST:event_enterTicketNumberFocusGained

    private void ticketNumberOutFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ticketNumberOutFocusGained

    }//GEN-LAST:event_ticketNumberOutFocusGained

    private void findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findActionPerformed
        try {
            int ticketNumber = Integer.parseInt(enterTicketNumber.getText());
            Node foundNode = binarytree.find(ticketNumber);

            if (foundNode != null) {
                ticketNumberOut.setText(String.valueOf(ticketNumber));
                plateOut.setText(foundNode.getPlat());
                typeOut.setText(foundNode.getType());
            } else {
                JOptionPane.showMessageDialog(this, "Ticket not found", "Not Found", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid ticket number", "Invalid Input", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_findActionPerformed

    private void findMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_findMouseClicked

    private void dashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dashboardActionPerformed
        dashboard back = new dashboard(binarytree, binarytreeExit);
        back.setVisible(true);
        dispose();
    }//GEN-LAST:event_dashboardActionPerformed

    private void OUTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OUTActionPerformed
        int ticketNumber = Integer.parseInt(ticketNumberOut.getText());
        String plat = plateOut.getText();
        String type = typeOut.getText();

        Node foundNode = binarytree.find(ticketNumber);

        java.sql.Timestamp entryTime = foundNode.entryTime;
        LocalDateTime entryTimes = entryTime.toLocalDateTime();
        String entryTimeString = entryTimes.getHour() + ":" + entryTimes.getMinute() + ":" + entryTimes.getSecond();

        java.sql.Timestamp exitTime = new java.sql.Timestamp(System.currentTimeMillis());
        LocalDateTime exitTimes = exitTime.toLocalDateTime();
        String exitTimeString = exitTimes.getHour() + ":" + exitTimes.getMinute() + ":" + exitTimes.getSecond();

        long duration = Duration.between(entryTimes, exitTimes).toMinutes();
        long durationHours = (long) Math.ceil((double) duration / 60);

        durationHours = Math.max(1, durationHours);

        long cost;
        if (foundNode.getType().equals("Car")) {
            cost = 4000;
        } else {
            cost = 2000;
        }
        long tariff = durationHours * cost;
//        System.out.println("total cost" + tariff);
//        System.out.println("Start Time: " + entryTimeString);
//        System.out.println("End Time: " + exitTimeString);
//        System.out.println(duration);
//        System.out.println(tariff);
//        System.out.println();

        saveToDatabase(ticketNumber, plat, type, entryTimeString, exitTimeString, duration, tariff);
        binarytreeExit.insert(ticketNumber, plat, type, entryTimeString, exitTimeString, duration, tariff);
        displayDataInTable();
        enterTicketNumber.setText("ENTER TICKET NUMBER");
        ticketNumberOut.setText("TICKET NUMBER");
        plateOut.setText("PLATE");
        typeOut.setText("TYPE");

    }//GEN-LAST:event_OUTActionPerformed

    private void displayDataInTable() {
        mode.setRowCount(0); 
        NodeExit root = binarytreeExit.getRoot();
        if (root != null) {
            displayInOrder(binarytreeExit.getRoot(), mode); 
        }
        tabelList.setModel(mode);
    }

    public void displayInOrder(NodeExit nodeExit, DefaultTableModel mode) {
        if (nodeExit != null) {
            
            String licensePlateNumber = nodeExit.plat;
            String type = nodeExit.type;
            String entryTime = nodeExit.entryTime; 

            String exitTime = nodeExit.exitTime; 

            long duration = nodeExit.duration;
            long tarif = nodeExit.tarif;
            Object[] row = {nodeExit.ticketNumber, licensePlateNumber, type, entryTime, exitTime, duration, tarif};
            mode.addRow(row);

            displayInOrder(nodeExit.leftChild, mode);
            displayInOrder(nodeExit.rightChild, mode);
        }
    }

    private void saveToDatabase(int ticketNumber, String licensePlateNumber, String type, String entryTime, String exitTime, long duration, long tarif) {
        String query = "INSERT INTO `parkingapp`.`exit` (`ticketNumber`, `liscensePlateNumber`, `type`, `entryTime`, `exitTime`, `duration`, `tarif`) VALUES (?, ?, ?, ?, ?, ?, ?);";
        try {
            Connection conn = Koneksi.getkoneksi();
            PreparedStatement pst = conn.prepareStatement(query);

            pst.setInt(1, ticketNumber);
            pst.setString(2, licensePlateNumber);
            pst.setString(3, type);
            pst.setString(4, entryTime);
            pst.setString(5, exitTime);
            pst.setLong(6, duration);
            pst.setLong(7, tarif);

            pst.execute();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal menyimpan data ke database ERROR: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OUT;
    private javax.swing.JButton dashboard;
    private javax.swing.JTextField enterTicketNumber;
    private javax.swing.JButton find;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField plateOut;
    private tabledark.TableDark tabelList;
    private javax.swing.JTextField ticketNumberOut;
    private javax.swing.JTextField typeOut;
    // End of variables declaration//GEN-END:variables
}
