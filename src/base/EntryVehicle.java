package base;

import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSet;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import implementasi.Tree;
import implementasi.Node;
import implementasi.TreeExit;
import java.time.LocalDateTime;

import java.util.Date;

public class EntryVehicle extends javax.swing.JFrame {

    private Tree binaryTree;
    private TreeExit treeExit;
    DefaultTableModel mode;

    public EntryVehicle(Tree binaryTree, TreeExit treeExit) {
        initComponents();
        this.treeExit = treeExit;
        
        getContentPane().setBackground(new Color(30, 30, 30));
        tabelList.fixTable(jScrollPane1);
        tabelList.setColumnAlignment(0, JLabel.CENTER);
        tabelList.setCellAlignment(0, JLabel.CENTER);
        tabelList.setColumnAlignment(1, JLabel.CENTER);
        tabelList.setCellAlignment(1, JLabel.CENTER);
        tabelList.setColumnAlignment(2, JLabel.CENTER);
        tabelList.setCellAlignment(2, JLabel.CENTER);
        tabelList.setColumnAlignment(3, JLabel.CENTER);
        tabelList.setCellAlignment(3, JLabel.CENTER);
        tabelList.setColumnAlignment(4, JLabel.CENTER);
        tabelList.setCellAlignment(4, JLabel.CENTER);
        tabelList.setColumnWidth(0, 50);
        tabelList.setColumnWidth(1, 100);
        tabelList.setColumnWidth(2, 50);
        tabelList.setColumnWidth(3, 100);
        tabelList.setColumnWidth(4, 100);
        
        mode = (DefaultTableModel) tabelList.getModel();
        this.binaryTree = binaryTree;
        displayDataInTable();

    }

    public Tree getBinaryTree() {
        return binaryTree;
    }

    private void clearInputFields() {
        TICKET.setText("");
        PLAT.setText("");

    }

//  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelList = new tabledark.TableDark();
        PLAT = new javax.swing.JTextField();
        TICKET = new javax.swing.JTextField();
        radioButtonMotor = new javax.swing.JRadioButton();
        radioButtonCar = new javax.swing.JRadioButton();
        buttonSave = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        Back = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabelList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ticket Number", "Liscense Plate", "Type", "Entry Date", "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelList);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 140, 600, 500));

        PLAT.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        PLAT.setText("LICENSE PLATE NUMBER");
        PLAT.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));
        PLAT.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PLATFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                PLATFocusLost(evt);
            }
        });
        PLAT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PLATActionPerformed(evt);
            }
        });
        getContentPane().add(PLAT, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 250, 230, 30));

        TICKET.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TICKET.setText("TICKET NUMBER");
        TICKET.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));
        TICKET.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TICKETFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TICKETFocusLost(evt);
            }
        });
        TICKET.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TICKETActionPerformed(evt);
            }
        });
        getContentPane().add(TICKET, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 200, 230, 30));

        buttonGroup1.add(radioButtonMotor);
        radioButtonMotor.setText("MOTORCYCLE");
        radioButtonMotor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonMotorActionPerformed(evt);
            }
        });
        getContentPane().add(radioButtonMotor, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 310, -1, -1));

        buttonGroup1.add(radioButtonCar);
        radioButtonCar.setText("CAR");
        radioButtonCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonCarActionPerformed(evt);
            }
        });
        getContentPane().add(radioButtonCar, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 310, -1, -1));

        buttonSave.setBackground(new java.awt.Color(51, 153, 0));
        buttonSave.setText("Save");
        buttonSave.setOpaque(true);
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });
        getContentPane().add(buttonSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 360, 80, 30));

        buttonDelete.setBackground(new java.awt.Color(204, 0, 51));
        buttonDelete.setText("Delete");
        buttonDelete.setOpaque(true);
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(buttonDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 360, 80, 30));

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 700, 90, 30));

        Back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/enrty vehicle (2).png"))); // NOI18N
        getContentPane().add(Back, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 770));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void PLATActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PLATActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PLATActionPerformed

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        
        int ticketNumber = Integer.parseInt(TICKET.getText());
        String plat = PLAT.getText();
        String type = radioButtonCar.isSelected() ? "Car" : "Motorcycle";
        java.sql.Timestamp entryTime = getTimeFromDatabase();
        
        Date date = getEntryDateFromDatabase();
        clearInputFields();
        saveToDatabase(ticketNumber, plat, type);
        binaryTree.insert(ticketNumber, plat, type, entryTime, date);
        displayDataInTable();
        binaryTree.displayTree();
        TICKET.setText("TICKET NUMBER");
        PLAT.setText("LISCENSE PLATE NUMBER");

    }

    public Date getEntryDateFromDatabase() {
        try {
            Connection conn = Koneksi.getkoneksi();
            String query = "SELECT CURRENT_DATE";
            PreparedStatement pst = conn.prepareStatement(query);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                return rs.getDate(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public java.sql.Timestamp getTimeFromDatabase() {
        try {
            Connection conn = Koneksi.getkoneksi();
            String query = "SELECT CURRENT_TIME";
            PreparedStatement pst = conn.prepareStatement(query);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                return rs.getTimestamp(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    private void displayDataInTable() {
        mode.setRowCount(0); // Mengosongkan tabel sebelum menambahkan data
        Node root = binaryTree.getRoot();
        if (root != null) {
            displayInOrder(binaryTree.getRoot(), mode); //nampilih data dari binary tree
        }
        tabelList.setModel(mode);
    }

    public void displayInOrder(Node node, DefaultTableModel mode) {
        if (node != null) {
            // Menampilkan data dari node saat ini
            String licensePlateNumber = node.plat;
            String type = node.type;
            java.sql.Timestamp entryTime = node.entryTime; // ngambil waktu dari database
            LocalDateTime time = entryTime.toLocalDateTime();
            String entryTimeString = time.getHour() + ":" + time.getMinute() + ":" + time.getSecond();
            Date date = node.date;

            Object[] row = {node.ticketNumber, licensePlateNumber, type, date, entryTimeString};
            mode.addRow(row);

            displayInOrder(node.leftChild, mode);
            displayInOrder(node.rightChild, mode);
        }
    }

    private void saveToDatabase(int ticketNumber, String licensePlateNumber, String type) {
        String query = "INSERT INTO entry (ticketNumber, licensePlateNumber, type, entryDate, Time) VALUES ( ?,?, ?, CURRENT_DATE, CURRENT_TIME)";
        try {
            Connection conn = Koneksi.getkoneksi();
            PreparedStatement pst = conn.prepareStatement(query);

            pst.setInt(1, ticketNumber);
            pst.setString(2, licensePlateNumber);
            pst.setString(3, type);
            // Set date to the current date

            pst.executeUpdate();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal menyimpan data ke database ERROR: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void deleteFromDatabase(int ticketNumber) {
        String query = "DELETE FROM entry WHERE ticketNumber = ?";
        try {
            Connection conn = Koneksi.getkoneksi();
            PreparedStatement pst = conn.prepareStatement(query);
            pst.setInt(1, ticketNumber);
            pst.executeUpdate();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Failed to delete from database. ERROR: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    private void radioButtonMotorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonMotorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioButtonMotorActionPerformed

    private void TICKETFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TICKETFocusGained
        String ticket = TICKET.getText();
        if (ticket.equals("TICKET NUMBER")) {
            TICKET.setText("");
        }
    }//GEN-LAST:event_TICKETFocusGained

    private void PLATFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PLATFocusGained
        String plat = PLAT.getText();
        if (plat.equals("LICENSE PLATE NUMBER")) {
            PLAT.setText("");
        }
    }//GEN-LAST:event_PLATFocusGained

    private void TICKETFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TICKETFocusLost
        String ticket = TICKET.getText();
        if (ticket.equals("") || ticket.equals("TICKET NUMBER")) {
            TICKET.setText("TICKET NUMBER");
        }
    }//GEN-LAST:event_TICKETFocusLost

    private void PLATFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PLATFocusLost
        String plat = PLAT.getText();
        if (plat.equals("") || plat.equals("LICENSE PLATE NUMBER")) {
            PLAT.setText("LICENSE PLATE NUMBER");
        }
    }//GEN-LAST:event_PLATFocusLost

    private void TICKETActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TICKETActionPerformed

    }//GEN-LAST:event_TICKETActionPerformed

    private void radioButtonCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonCarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioButtonCarActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        int selectedRow = tabelList.getSelectedRow();
        if (selectedRow != -1) {
            int ticketNumber = (int) mode.getValueAt(selectedRow, 0);
            deleteFromDatabase(ticketNumber);
            boolean delete = binaryTree.delete(ticketNumber);
            if (delete) {
                mode.removeRow(selectedRow);
            } else {
                JOptionPane.showMessageDialog(this, "failed to delete", "Deletion Failed", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "please select a row to delete", "no row selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dashboard back = new dashboard(getBinaryTree(), treeExit);
        back.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Back;
    private javax.swing.JTextField PLAT;
    private javax.swing.JTextField TICKET;
    private javax.swing.JButton buttonDelete;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonSave;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton radioButtonCar;
    private javax.swing.JRadioButton radioButtonMotor;
    private tabledark.TableDark tabelList;
    // End of variables declaration//GEN-END:variables
}
